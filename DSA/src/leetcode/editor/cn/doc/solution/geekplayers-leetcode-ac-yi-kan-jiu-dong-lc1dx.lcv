## 思路:

分析一下，首先题中说**找到 s 中所有是 p 的字母异位词(**假如p1 的字母异位词是p2, 两个字符串p1、p2包含的各种字母数量都相等**)的子串**，就这句话，就包含了如下两个重要信息：

- 找到的符合要求的子串长度都是 p
- 什么是字母异位词？也就是我们不关心 p 这个串的顺序，只关心字母是否出现以及出现的次数，这种问题解决方案一般有两种，一种是利**用排序强制顺序**，另一种就是**用哈希表**的方法。

本题，我们可以用**固定宽度的滑动窗口**来做。
​

那么用什么数据结构来记录窗口中各个字母出现的次数呢？哈希表是比较一个比较符合直觉的想法。
​

还有一种就是用数组。因为字符串中只包含小写字母，也就是只有 26 种字母，所以我们可以使用一个长度为 26 的数组来记录，数组下标表示字母，值则表示字母出现的次数。
​

### 方法: 滑动窗口 + 数组模拟哈希表

#### 已AC的C++代码

* cpp

```cpp
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> res; /* 存放这些子串的起始索引startPos */
        int restCount = p.size(); /* 维护一个固定长度的窗口, 窗口长度 = len(p), restCount: 剩下的待匹配字符的数量 */
        vector<int> pFreq(26); /* 模拟一个计数哈希表 */
        for (int i = 0; i < p.size(); i++)
            pFreq[p[i] - 'a']++;
        vector<int> sFreq(26); /* 模拟一个计数哈希表, sFreq: 字符串s中处于滑动窗口内的字符的频次 */
        for (int i = 0; i < s.size(); i++)
        {
            char c = s[i];
            sFreq[c - 'a']++; /* 向窗口末尾加入1个新字符 */
            if (sFreq[c - 'a'] <= pFreq[c - 'a']) /* 当前窗口中这个字符的数量还没到上限, 可以成功加入 */
                restCount--;
            if (i >= p.size()) /* 删除原窗口最前面的那1个字符, 最新的startPos = i - len(p) + 1, 那么上一次的startPos = i - p.size() */
            {
                char h = s[i - p.size()]; /* h: 上一轮中窗口中最前面的字符 */
                sFreq[h - 'a']--;
                if (sFreq[h - 'a'] < pFreq[h - 'a'])
                    restCount++;
            }
            // 字符都匹配完成, 表示是一个有效的字母异位词(anagram)
            if (restCount == 0) /* i - startPos + 1 = len(p) => startPos = i - len(p) + 1 */
                res.push_back(i - p.size() + 1);
        }
        return res;
    }
};
```

#### 运行结果

执行用时：**4 ms**, 在所有 C++ 提交中击败了 **99.47%** 的用户

内存消耗：8.5 MB, 在所有 C++ 提交中击败了 **46.94%** 的用户

![image.png](https://pic.leetcode-cn.com/1638029652-WYcDcN-image.png)

<br />

### 定长数组优化

使用定长数组代替vector, 速度可以快一些。

* C++

```C++
class Solution {
public:
    vector<int> findAnagrams(string s, string p) {
        vector<int> res; /* 存放这些子串的起始索引startPos */
        int restCount = p.size(); /* 维护一个固定长度的窗口, 长度= len(p), restCount: 剩下的待匹配字符的数量 */
        int pFreq[26]; /* 模拟一个计数哈希表 */
        memset(pFreq, 0, sizeof(pFreq));
        for (int i = 0; i < p.size(); i++)
            pFreq[p[i] - 'a']++;
        int sFreq[26]; /* 模拟一个计数哈希表, sFreq: s中处于滑动窗口内的字符的频次 */
        memset(sFreq, 0, sizeof(sFreq));        
        for (int i = 0; i < s.size(); i++)
        {
            char c = s[i];
            sFreq[c - 'a']++;
            if (sFreq[c - 'a'] <= pFreq[c - 'a']) /* 匹配到了一个待匹配的字符 */
                restCount--;
            if (i >= p.size()) /* 删除最前面的1个字符 */
            {
                char h = s[i - p.size()];
                sFreq[h - 'a']--;
                if (sFreq[h - 'a'] < pFreq[h - 'a'])
                    restCount++;
            }
            // check is anagram
            if (restCount == 0) /* i - startPos + 1 = len(p) => startPos = i - len(p) + 1 */
                res.push_back(i - p.size() + 1);
        }
        return res;
    }
};
```

#### 运行结果

执行用时：**0 ms**, 在所有 C++ 提交中击败了 **100.00%** 的用户

内存消耗：8.5 MB, 在所有 C++ 提交中击败了 **68.92%** 的用户

通过测试用例：61 / 61

![image.png](https://pic.leetcode-cn.com/1638031042-GXxeMy-image.png)

### 卡片

![image.png](https://pic.leetcode-cn.com/1638031140-PAceiC-image.png)

如果看不到图, 可以点击 https://pic.rmb.bdstatic.com/bjh/2b88a2010c2d2603fe78deb8d59a2a63.png 查看。

